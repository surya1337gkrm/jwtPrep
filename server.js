//JWT[ JSON Web Token ]
//It can be stored on the client side unlike session mnagement authentication we dont have to store the session keys on the server/db.
//...JWT has 3 parts seperated by periods
// JWT KEY: <header info>.<payload/user information>.<signature>
//header info: type of hashing and type of key
//payload consists data we want to send to server/client
//Signature is hash which is generated by hashing thr header and payload with a secret key
//...so that if the data changes, signature will become invalid, thus helps in authentication

//because jwt will have the necessary data, one jwt token can be used top login to diff servers that shares the same secret key
//Refer: https://www.youtube.com/watch?v=7Q17ubqLfaM&ab_channel=WebDevSimplified

//load env variables
require('dotenv').config();

const express = require('express');
const app = express();
const jwt = require('jsonwebtoken');
//to let the app use json
app.use(express.json());

const posts = [
  {
    username: 'Surya',
    post: 'Post 1',
  },
  {
    username: 'Maddy',
    post: 'Post 2',
  },
];

//middleware function to check the user
const authenticateToken = (req, res, next) => {
  //we can send a request with token by sending Authorization information...
  //...as a key Authorization : Bearer <Token>
  //it will be stored in req.headers
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (token == null) return res.sendStatus(401);
  //now verify if token is valid
  jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    //store user info in req.user
    req.user = user;
    next();
  });
};

app.get('/posts', authenticateToken, (req, res, next) => {
  console.log(req.user);
  //middleware function will be called first which willadd data to req.user if token is valid
  res.json(posts.filter((post) => post.username === req.user.name));
});

// app.post('/login', (req, res, next) => {
//   //handle the authentication: Login part
//   const username = req.body.username;
//   const user = { name: username };

//   //use jwt package to create a jwt token.
//   const accessToken = jwt.sign(user, process.env.ACCESS_TOKEN_SECRET);
//   res.json({ accessToken });
// });

app.listen(3000, () => {
  console.log('Listening on Port 3000');
});

//create random strings using crypto library in node
// const crypto = require('crypto');
// console.log(crypto.randomBytes(64).toString('hex').substring(1, 15));



//if our accessToken is stolen, anyone with access to the accessToken can login
//to avoid that, we need to expire our tokens and only can create new tokens only if we have a refresh token with us.